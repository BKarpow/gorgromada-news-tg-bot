<?php

include (__DIR__ . '/vendor/autoload.php');
include (__DIR__ . '/config.php');

$apiJsonAirChannel = 'https://tg.i-c-a.su/json/air_alert_ua?limit=100';
$fileLastAirAlarmTimestamp = './airAlarmLast.txt';



/**
 * –°—Ç–≤–æ—Ä—é—î –∑–∞–ø–∏—Ç GET —Ç–∏–ø—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ cURL
 * @param string $url
 * @return string
 */
function curlGetRequest(string $url, bool $show = false):string
{
    $agent = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'; 
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_USERAGENT, $agent);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    $response_data = curl_exec($ch);
    if (curl_errno($ch) > 0) {
        die('–ü–∏–º–∏–ª–∫–∞ curl: ' . curl_error($ch));
    }
    curl_close($ch);
    if ($show) {
        echo "<pre>";
        var_dump($response_data);
        echo "</pre>";
        die();
    }
    return $response_data;
}


/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ RSS –∏ –≤–æ–∑—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–æ–∫—É xml
 * 
 * @param string $linkRss - –∞–¥—Ä–µ—Å. –∏—Å—Ç–æ—á–Ω–∏–∫–∞ rss
 * @return string - data xml.
 */
function getDataFromRss(string $linkRss):string
{
    return curlGetRequest($linkRss);
}

/**
 * –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
 * 
 * @param string $description
 * @return string
 */
function stripHtmlCode(string $description):string
{
    $filterMask = [
        '&amp;' => '',
        'amp;' => '',
        '&laquo;' => '',
        'laquo;' => '',
        'ndash;' => '',
        '&ndash;' => '',
        '&raquo;' => '',
        'raquo;' => '',
        'nbsp;' => '',
        '&nbsp;' => ''
    ];
    $description = str_replace( array_keys($filterMask),
                              array_values($filterMask), $description);
    return $description;
}

/**
 * –í–µ—Ä–Ω–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–≤—à–∏–π –º–∞—Å–ª–∏–≤ –∏–∑ rss –∏—Å—Ç–æ—á–Ω–∏–∫–∞.
 * 
 * @param SimpleXMLElement $item
 * @return array 
 */
function getDataAsArray($item):array
{
    return [
        'title' => (string)$item->title,
        'pubDate' => @strtotime((string)$item->pubDate),
        'date' => date('d-m-Y H:i', @strtotime((string)$item->pubDate)),
        'description' => stripHtmlCode( (string)$item->description ),
        'link' => (string) $item->link,
    ];
}

/**
 * –í–µ—Ä–Ω–µ—Ç –º–∞—Å–ª–∏–≤ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ rss.
 * 
 * @return array
 */
function parseRssDate():array
{
    global $linkRssChanel;
    $rssData = new SimpleXMLElement( getDataFromRss($linkRssChanel) );
    $rssArray = [ 'rss' => [] ];
    if ($rssData->channel->item) {
        foreach($rssData->channel->item as $item) {
            $rssArray['rss'][] = getDataAsArray($item);
        }
    }
    return $rssArray;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
 * 
 * @return array
 */
function getDataFromJsonDb():array
{
    if (!file_exists(FILE_JSON_DB)){
        file_put_contents(FILE_JSON_DB, '{"rss":[]}');
    }
    return json_decode( file_get_contents( FILE_JSON_DB), true);
}

/**
 * –ó–∞–ø–∏—à–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–æ–≤–æ—é –±–∞–∑—É.
 * 
 * @param array $data
 */
function writeDataInJsonDb(array $data)
{
    file_put_contents(FILE_JSON_DB, json_encode($data) );
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤ –±–∞–∑—É.
 * –í–µ—Ä–Ω–µ—Ç true –µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–∞ –∏–ª–∏ false –µ—Å–ª–∏ —Ç–∞–∫–∞—è –Ω–æ–≤–æ—Å—Ç—å —É–∂–µ –±—ã–ª–∞.
 * @param array $news - –º–∞—Å–ª–∏–≤ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
 * @return bool
 */
function isUniqueNews(array $news):bool
{
    $d =  getDataFromJsonDb();
    $u = true;
    foreach($d['rss'] as $itemDb){
        if ($news['link'] === $itemDb['link']){
            $u = false;
            break;
        }
    }
    if ($u){
        $d['rss'][] = $news;
        writeDataInJsonDb($d);
    }
    return $u;
}

/**
 * –í–µ—Ä–Ω–µ—Ç –º–∞—Å—Å–∏–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.
 * 
 * @return array
 */
function getUniqueNews():array
{
    $rssArray = parseRssDate();
    $gorNews = parseUkrNetForGor();
    $uNews = [];
    if (!empty($rssArray['rss'])){
        foreach($rssArray['rss'] as $news) {
            if ( isUniqueNews($news) ) {
                $uNews[] = $news;
            }
        }
    }
    $news = null;
    if (!empty($gorNews)){
        foreach($gorNews as $news) {
            if ( isUniqueNews($news) ) {
                $uNews[] = $news;
            }
        }
    }
    return $uNews;
}

/**
 * –í–µ—Ä–Ω–µ—Ç json –æ–¥–¥–∞—á—É –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ –∏–∑ ukr.net –¥–ª—è –ß–µ—Ä–∫–∞—Å—å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏.
 * 
 * @return array
 */
function getArrayUkrNetCherkasyNews():array
{
    // $linkJsonSource = 'https://www.ukr.net/news/dat/cherkasy/2/';
    // return json_decode(curlGetRequest($linkJsonSource, true), true  );
    return [];
}

/**
 * –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ì–æ—Ä–æ–¥–∏—à–µ.
 * 
 * @param array $data - –º–∞—Å—Å–∏–≤ –∏–∑ –æ—Ç–¥–∞—á–∏ Ukr.net
 * @param array - –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
 * 
 */
function filterForGorodischeFromCherkasyNews(array $data):array
{
    $newses = [];
    if (!empty($data['tops']) ) {
        foreach($data['tops'] as $news) {
            if (preg_match('#–æ—Ä–æ–¥–∏—â#usi', $news['Title'])) {
                $newses[] = $news;
            }
        }
    }
    return $newses;
}

/**
 * –û—Ñ–æ—Ä–º–ª—è–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–¥–∞—á–∏ —É–∫—Ä.–Ω–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É —Ñ–∞–π–ª–æ–≤–æ–π –±–∞–∑—ã
 * 
 * @param array $newses
 * @return array
 */
function formatterNewsForUrkNet(array $newses):array
{
    $nn = [];
    $n = (isset($newses['tops'])) ? $newses['tops'] : $newses;
    foreach($n as $news) {
        if (!empty($news)) {
            $nn[] = [
                'title' => $news['Title'],
                'pubDate' => $news['DateCreated'],
                'date' => date('d-m-Y H:i', $news['DateCreated']),
                'description' => $news['Description'],
                'link' => $news['Url']
            ];
            
        }
    }
    return $nn;

}

/**
 * –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–µ—Ä –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —É–∫—Ä.–Ω–µ—Ç
 * 
 * @return array - –º–∞—Å—Å–∏–≤ –Ω–æ–≤–æ—Å—Ç–µ–π.
 */
function parseUkrNetForGor():array
{
    $news = getArrayUkrNetCherkasyNews();
    $gorMews = filterForGorodischeFromCherkasyNews($news);
    $data =  formatterNewsForUrkNet($gorMews);
    return $data;
}


/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∫–∞–Ω–∞–ª
 * 
 * @return void
 */
function senderToTelegram()
{
    $newses = getUniqueNews();
    $telegram = new Telegram(TELEGRAM_TOKEN);
    $con = array('chat_id' => TELEGRAM_CHAT_ID, 'text' => '');
    foreach($newses as $news) {
        // echo "<pre>" . $news['title'] . PHP_EOL;
        $text = $news['date'] .
        PHP_EOL . $news['title'] . 
        PHP_EOL . $news['description'] . 
        PHP_EOL . $news['link'];
        $con['text'] = $text;
        $telegram->sendMessage($con);
    }
}

/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —á–∞—Å–æ–≤—É –º—ñ—Ç–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ
 * @return string
 */
function getTimestamp():string
{
    $timestamp = date('(d.m/H:i)');
    return (string) $timestamp;
}

/**
 * –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –≤ –∫–∞–Ω–∞–ª –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ —Ç–∞ –∫—ñ–Ω–µ—Ü—å —Ç—Ä–∏–≤–æ–≥–∏
 * @param bool $start
 * @param null|string $dateString
 * @return void
 */
function airAlarm(bool $start = true, $dateString = null)
{
    $ts = (!empty($dateString)) ? $dateString : getTimestamp();
    $telegram = new Telegram(TELEGRAM_TOKEN);
    $con = array('chat_id' => TELEGRAM_CHAT_ID, 'text' => '');
    if ($start) {
        $con['text'] = '‚ùóÔ∏è‚ùóÔ∏è–ü–û–í–Ü–¢–†–Ø–ù–ê –¢–†–ò–í–û–ì–ê ' . $ts;
    } else {
        $con['text'] = 'üü¢ –í–Ü–î–ë–Ü–ô –ü–û–í–Ü–¢–†–Ø–ù–û–á –¢–†–ò–í–û–ì–ò ' . $ts;
    }
    $telegram->sendMessage($con);
}

/**
 * –§—É–Ω–∫—Ü—ñ—è —è–∫–∞ –æ—Ç—Ä–∏–º—É—î –≤—Å—ñ –ø–æ—Å—Ç–∏ —ñ–∑ –∫–∞–Ω–∞–ª—É –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥ —Ç–∞
 * –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö —è–∫ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤
 * @param string $apiJsonUrl
 * @return array
 */
function getTelegramChannelPosts(string $apiJsonUrl):array
{
    $dataJson = curlGetRequest($apiJsonUrl);
    if (!empty($dataJson)) {
        $data = json_decode($dataJson, true);
        $rArray = [];
        foreach($data['messages'] as $message) {
            $r = [
                'dateRaw' => (int)$message['date'],
                'date' => date( '(d.m/H:i)', (int)$message['date']),
                'message' => strip_tags( $message['message'] ),
            ];
            if (preg_match('#–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞#siu', $message['message'])) {
                $r['start'] = true;
            }
            if (preg_match('#–í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏#siu', $message['message'])) {
                $r['start'] = false;
            }
            $rArray[] = $r;
        }
        return $rArray;
    }
    return [];
}


/**
 * –§—ñ–ª—å—Ä—É—î —Ç—Ä–∏–≤–æ–≥–∏ —Ç—ñ–ª—å–∫–∏ –ø–æ —Ä–µ–≥—ñ–æ–Ω—É –æ–±–ª–∞—Å—Ç—ñ
 * @param string $region
 * @param array $posts
 * @return array
 */
function filterPostForRegion(string $region, array $posts):array
{
    $fa = [];
    foreach ($posts as $post) {
        if (preg_match('#'.preg_quote($region).'#siu', $post['message'])) {
            $fa[] = $post;
        }
    }
    // file_put_contents('./' . date('dmH_i') . '.txt', var_export($fa, true) );
    return $fa;
}


/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î —Ç–∞–π–º—à—Ç–∞–º–ø –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—É —Ç—Ä–∏–≤–æ–≥—É
 * @return int 
 */
function getLastTimestampForAirAlarm():int
{
    global $fileLastAirAlarmTimestamp;
    $stamp = time();
    if (file_exists($fileLastAirAlarmTimestamp)) {
        $stamp = trim( file_get_contents($fileLastAirAlarmTimestamp) );
    } else {
        file_put_contents($fileLastAirAlarmTimestamp, $stamp);
    }

    return (int) $stamp;
}

/**
 * –ó–∞–ø–∏—Å—É—î –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∞–π–º—à—Ç–∞–º–ø —Ç—Ä–∏–≤–æ–≥–∏
 * @param int $timestamp
 */
function writeAirAlarmTimestamp(int $timestamp)
{
    global $fileLastAirAlarmTimestamp;
    file_put_contents($fileLastAirAlarmTimestamp, $timestamp);
}

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥. 
 * –°–∞–º–µ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏—Ä—ñ—à—É—î –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥—É, —á–∏ –Ω—ñ.
 * @return void
 */
function mainAirAlarm()
{
    global $apiJsonAirChannel;
    $data = getTelegramChannelPosts($apiJsonAirChannel);
    $alarms = filterPostForRegion('#–ß–µ—Ä–∫–∞—Å—å–∫–∞_–æ–±–ª–∞—Å—Ç—å', $data);
    
    foreach($alarms as $alarm) {
        if (getLastTimestampForAirAlarm() < (int)$alarm['dateRaw']){
            writeAirAlarmTimestamp((int)$alarm['dateRaw']);
            airAlarm($alarm['start'], $alarm['date']);
        }
    }
}
